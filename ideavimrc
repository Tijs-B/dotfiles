" Lots of inspiration here: https://github.com/JetBrains/ideavim/discussions/303#discussioncomment-7664118

" General
let mapleader = " "
nnoremap <SPACE> <Nop>
set history=1000
set showmode
set visualbell
set noerrorbells
set nooldundo
set relativenumber

" Search and replace
set incsearch
set hlsearch
set ignorecase
set smartcase

" Idea specific settings
set ideamark
set ideajoin
set ideastatusicon=gray

" Plugins
set surround
set commentary
set highlightedyank
set NERDTree

" Plugin configuration
let g:highlightedyank_highlight_duration = "1000"

" buffer
nmap <leader>bd <Action>(CloseContent)

" window navigation
nmap L <Action>(NextTab)
nmap H <Action>(PreviousTab)

nmap <leader>1 <Action>(GoToTab1)
nmap <leader>2 <Action>(GoToTab2)
nmap <leader>3 <Action>(GoToTab3)
nmap <leader>4 <Action>(GoToTab4)
nmap <leader>5 <Action>(GoToTab5)
nmap <leader>6 <Action>(GoToTab6)
nmap <leader>7 <Action>(GoToTab7)
nmap <leader>8 <Action>(GoToTab8)
nmap <leader>9 <Action>(GoToTab9)

" code
map <leader>c <Action>(CommentByLineComment)
map <leader>C <Action>(CommentByBlockComment)
nmap <leader>qf <Action>(ShowIntentionActions)
nmap <leader>se <Action>(ShowErrorDescription)
nmap <leader>om <Action>(OverrideMethods)
nmap <leader>im <Action>(ImplementMethods)
nmap <leader>fc <Action>(ReformatCode)
" nmap <leader>ic <Action>(InspectCode)
" nmap <leader>so <Action>(SelectAllOccurrences)
" nmap <leader>gc <Action>(Generate)
" nmap <leader>gt <Action>(GoToTest)

" run
nmap <leader>rc <Action>(RunContextGroup)
nmap <leader>rx <Action>(ChooseRunConfiguration)
nmap <leader>rr <Action>(Rerun)
nmap <leader>rt <Action>(RerunTests)
nmap <leader>rs <Action>(Stop)

" debug
nmap <leader>dc <Action>(ContextDebug)
nmap <leader>dx <Action>(Debug)
nmap <leader>db <Action>(ToggleLineBreakpoint)
nmap <leader>de <Action>(EditBreakpoint)
nmap <leader>dv <Action>(ViewBreakpoints)

" refactor
nmap <leader>rn <Action>(RenameElement)
nmap <leader>re <Action>(Refactorings.QuickListPopupAction)
nmap <leader>uw <Action>(Unwrap)
nmap <leader>sw <Action>(SurroundWith)
nmap <leader>sd <Action>(SafeDelete)
nmap <leader>oi <Action>(OptimizeImports)

" telescope-like
nmap <leader><leader> <action>(com.mituuz.fuzzier.Fuzzier)
nmap <leader>/ <action>(com.mituuz.fuzzier.FuzzyGrep)

" []
nmap [b <Action>(PreviousTab)
nmap ]b <Action>(NextTab)
nmap [g <Action>(GotoPreviousError)
nmap ]g <Action>(GotoNextError)
nmap [u <Action>(GotoPrevElementUnderCaretUsage)
nmap ]u <Action>(GotoNextElementUnderCaretUsage)
nmap [o <Action>(PreviousOccurence)
nmap ]o <Action>(NextOccurence)
nmap [m <Action>(MethodUp)
nmap ]m <Action>(MethodDown)
nmap [c <Action>(JumpToLastChange)
nmap ]c <Action>(JumpToNextChange)

" goto
nmap <leader>a <Action>(GotoAction)
nmap ga <Action>(GotoAction)
nmap gc <Action>(GotoClass)
nmap gf <Action>(GotoFile)
nmap gs <Action>(GotoSymbol)
nmap gt <Action>(GoToTest)
nmap gT <Action>(TextSearchAction)
nmap go <Action>(GotoSuperMethod)
nmap gd <Action>(GotoDeclaration)
nmap gD <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gI <Action>(QuickImplementations)
nmap gn <Action>(ShowNavBar)

" other navigation
map <S-Space> <Action>(GotoNextError)
nmap <leader>n :NERDTree<CR>
nmap <leader>e :NERDTree<CR>
nnoremap <silent> <Esc> <Esc>:noh<CR>

" move lines up and down with A-j and A-k
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv
